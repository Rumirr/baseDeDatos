SELECT * FROM BANKMARKETING;

CREATE DATABASE BANKMARKETING;
USE BANKMARKETING;

/*"age";"job";"marital";
"education";"default";"balance";
"housing";"loan";"contact";
"day";"month";"duration";"campaign";
"pdays";"previous";"poutcome";"y"*/


CREATE TABLE TMP_BANKMARKETING(
	AGE INT,
    JOB VARCHAR(32),
    MARITAL VARCHAR(32),
    EDUCATION VARCHAR(32),
    `DEFAULT` VARCHAR(32),
    BALANCE INT,
    HOUSING VARCHAR(32),
    LOAN VARCHAR(32),
    CONTACT VARCHAR(32),
    DAY INT,
    MONTH VARCHAR(33),
    DURATION INT,
    CAMPAIGN INT,
    PDAYS INT,
    PREVIOUS INT,
    POUTCOME VARCHAR(32),
    Y VARCHAR(32)
);

SELECT * FROM TMP_BANKMARKETING ;

/*********************************************************|TABLAS|***********************************************/

CREATE TABLE CLIENT(
	CLIENT_ID INT AUTO_INCREMENT,
    AGE TINYINT(3) NOT NULL,
    BALANCE DECIMAL(8,2) NOT NULL,
    INSOLVENTE TINYINT(1) DEFAULT NULL,
    HOUSE_LOAN TINYINT(1) DEFAULT NULL,
    PERSONAL_LOAN TINYINT(1) DEFAULT NULL,
    
    JOB_ID INT,
    EDUCATION_ID INT,
    MARITAL_ID INT NOT NULL,
    
    PRIMARY KEY(CLIENT_ID),
    
    CONSTRAINT FK_JOB_ID FOREIGN KEY(JOB_ID) REFERENCES JOB(JOB_ID) ON DELETE SET NULL ON UPDATE CASCADE,
    CONSTRAINT FK_EDUCATION_ID FOREIGN KEY(EDUCATION_ID) REFERENCES EDUCATION(EDUCATION_ID) ON DELETE SET NULL ON UPDATE CASCADE,
    CONSTRAINT FK_MARITAL_ID FOREIGN KEY(MARITAL_ID) REFERENCES MARITAL(MARITAL_ID) ON DELETE RESTRICT ON UPDATE CASCADE,
    
    CONSTRAINT CHK_AGE CHECK(AGE >= 18)
);


CREATE TABLE JOB(
	JOB_ID INT AUTO_INCREMENT,
    NAME VARCHAR(32),
    
    PRIMARY KEY(JOB_ID)
);

CREATE TABLE EDUCATION(
	EDUCATION_ID INT AUTO_INCREMENT,
    NAME VARCHAR(32),
    
    PRIMARY KEY (EDUCATION_ID)
);

CREATE TABLE MARITAL(
	MARITAL_ID INT AUTO_INCREMENT,
    NAME VARCHAR(32),
    
    PRIMARY KEY (MARITAL_ID)
);

CREATE TABLE `CALL`(
	CALL_ID INT AUTO_INCREMENT,
    TYPE_CONTACT ENUM('cellular', 'telephone'),
    DATE_CONTACT DATE NOT NULL,
    DURATION_CALL SMALLINT(4) NOT NULL,
    NUMBER_CONTACTS_THIS_CAMPAIGN SMALLINT(3) NOT NULL,
    DAYS_LAST_CONTACT SMALLINT(4) DEFAULT NULL,
    NUMBER_CONTACS_BEFORE_THIS_CAMPAIGN SMALLINT(4) DEFAULT 0,
    RESULT_LAST_CAMPAIGN ENUM('failure', 'other', 'success'),
    SOLD_PRODUCT TINYINT(1) DEFAULT 0,
    
    CLIENT_ID INT NOT NULL,
    
    PRIMARY KEY(CALL_ID),
    
    CONSTRAINT FK_CLIENT_ID FOREIGN KEY(CLIENT_ID) REFERENCES CLIENT(CLIENT_ID) ON DELETE CASCADE ON UPDATE CASCADE
);

SELECT * FROM TMP_BANKMARKETING;
/**************************************|PROCEDURES - FUNCTIONS|****************************************/
SELECT *, F_DATE(DAY, MONTH, 2019) FROM TMP_BANKMARKETING ;

SELECT DISTINCT(MONTH) FROM TMP_BANKMARKETING;


DELIMITER $$
CREATE FUNCTION F_DATE(DIA INT, MES VARCHAR(33), ANYO INT) RETURNS DATE
BEGIN

	DECLARE V_MES TINYINT(2);

	CASE MES
		WHEN 'jan' THEN SET V_MES = 01;
        WHEN 'feb' THEN SET V_MES = 02;
        WHEN 'mar' THEN SET V_MES = 03;
        WHEN 'apr' THEN SET V_MES = 04;
        WHEN 'may' THEN SET V_MES = 05;
        WHEN 'jun' THEN SET V_MES = 06;
        WHEN 'jul' THEN SET V_MES = 07;
        WHEN 'aug' THEN SET V_MES = 08;
        WHEN 'sep' THEN SET V_MES = 09;
        WHEN 'oct' THEN SET V_MES = 10;
        WHEN 'nov' THEN SET V_MES = 11;
        WHEN 'dec' THEN SET V_MES = 12;
    
    END CASE;

	RETURN DATE(concat(ANYO, '-', V_MES, '-', DIA));

END;
$$
DELIMITER ;
/**********************************************************************/

SELECT *,F_SI_NO(POUTCOME) FROM TMP_BANKMARKETING;

DELIMITER $
CREATE FUNCTION F_SI_NO(VALOR VARCHAR(32)) RETURNS TINYINT(1)
BEGIN

	CASE VALOR
		WHEN 'no' THEN RETURN 0;
        WHEN 'yes' THEN RETURN 1;
        ELSE RETURN NULL;
	END CASE;

END;
$$
DELIMITER ;

DROP FUNCTION P_SI_NO;


/****************************************************************************************************************/

SELECT * FROM TMP_BANKMARKETING;

SELECT DISTINCT TMP_BANKMARKETING.JOB FROM TMP_BANKMARKETING WHERE TMP_BANKMARKETING.JOB NOT IN (SELECT JOB.NAME FROM JOB) AND TMP_BANKMARKETING.JOB != 'unknown';



DELIMITER $$
CREATE PROCEDURE P_JOB()
BEGIN

	DECLARE V_JOB VARCHAR(32);
    DECLARE V_END TINYINT(1);
    
    DECLARE C_JOB CURSOR FOR SELECT DISTINCT TMP_BANKMARKETING.JOB FROM TMP_BANKMARKETING WHERE TMP_BANKMARKETING.JOB NOT IN (SELECT JOB.NAME FROM JOB) AND TMP_BANKMARKETING.JOB != 'unknown';
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET V_END = 1;

	OPEN C_JOB;
    
    L_JOB : LOOP
    
		FETCH C_JOB INTO V_JOB;
        
        IF V_END = 1 THEN 
			LEAVE L_JOB; 
		END IF;
        
        INSERT INTO JOB(NAME) VALUES(V_JOB);
    
    END LOOP L_JOB;
	
    CLOSE C_JOB;
END;
$$
DELIMITER ;

DROP PROCEDURE P_JOB;

CALL P_JOB;
SELECT * FROM JOB;

/*************************************************/
SELECT DISTINCT MARITAL FROM TMP_BANKMARKETING;

SELECT DISTINCT 
	TMP_BANKMARKETING.MARITAL 
FROM 
	TMP_BANKMARKETING 
WHERE 
	TMP_BANKMARKETING.MARITAL NOT IN (SELECT MARITAL.NAME FROM MARITAL) 
	AND TMP_BANKMARKETING.MARITAL != 'unknown';


DELIMITER $$
CREATE PROCEDURE P_MARITAL()
BEGIN

	DECLARE V_MARITAL VARCHAR(32);
    DECLARE V_END TINYINT(1);
    
    DECLARE C_MARITAL CURSOR FOR SELECT 
									DISTINCT TMP_BANKMARKETING.MARITAL 
								FROM 
									TMP_BANKMARKETING 
								WHERE 
									TMP_BANKMARKETING.MARITAL NOT IN (SELECT MARITAL.NAME FROM MARITAL) 
									AND TMP_BANKMARKETING.MARITAL != 'unknown';
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET V_END = 1;

	OPEN C_MARITAL;
    
    L_MARITAL : LOOP
    
		FETCH C_MARITAL INTO V_MARITAL;
        
        IF V_END = 1 THEN 
			LEAVE L_MARITAL; 
		END IF;
        
        INSERT INTO MARITAL(NAME) VALUES(V_MARITAL);
    
    END LOOP L_MARITAL;
	
    CLOSE C_MARITAL;
END;
$$
DELIMITER ;

CALL P_MARITAL;

SELECT * FROM MARITAL;


/*****************************************************/
SELECT DISTINCT EDUCATION FROM TMP_BANKMARKETING;

SELECT DISTINCT 
	TMP_BANKMARKETING.EDUCATION 
FROM 
	TMP_BANKMARKETING 
WHERE 
	TMP_BANKMARKETING.EDUCATION NOT IN (SELECT EDUCATION.NAME FROM EDUCATION) 
	AND TMP_BANKMARKETING.EDUCATION != 'unknown';


DELIMITER $$
CREATE PROCEDURE P_EDUCATION()
BEGIN

	DECLARE V_EDUCATION VARCHAR(32);
    DECLARE V_END TINYINT(1);
    
    DECLARE C_EDUCATION CURSOR FOR SELECT  
									DISTINCT TMP_BANKMARKETING.EDUCATION 
								FROM 
									TMP_BANKMARKETING 
								WHERE 
									TMP_BANKMARKETING.EDUCATION NOT IN (SELECT EDUCATION.NAME FROM EDUCATION) 
									AND TMP_BANKMARKETING.EDUCATION != 'unknown';
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET V_END = 1;

	OPEN C_EDUCATION;
    
    L_EDUCATION : LOOP
    
		FETCH C_EDUCATION INTO V_EDUCATION;
        
        IF V_END = 1 THEN 
			LEAVE L_EDUCATION; 
		END IF;
        
        INSERT INTO EDUCATION(NAME) VALUES(V_EDUCATION);
    
    END LOOP L_EDUCATION;
	
    CLOSE C_EDUCATION;
END;
$$
DELIMITER ;

CALL P_EDUCATION;

SELECT * FROM EDUCATION;


/*************************************************************/
SELECT DISTINCT POUTCOME FROM TMP_BANKMARKETING;
SELECT * FROM TMP_BANKMARKETING;
SELECT * FROM JOB;

# INSERT DE LA TABLA CALL
SELECT  (`AUTO_INCREMENT` - 1) CLIENT_ID FROM information_schema.TABLES WHERE TABLE_SCHEMA = 'BANKMARKETING' AND TABLE_NAME = 'CLIENT';

SELECT
	TMP_BANKMARKETING.AGE,
    JOB.JOB_ID,
    MARITAL.MARITAL_ID,
    EDUCATION.EDUCATION_ID,
    F_SI_NO(TMP_BANKMARKETING.DEFAULT),
    TMP_BANKMARKETING.BALANCE, 
    F_SI_NO(TMP_BANKMARKETING.HOUSING),
    F_SI_NO(LOAN),
    CASE TMP_BANKMARKETING.CONTACT WHEN 'unknown' THEN NULL ELSE TMP_BANKMARKETING.CONTACT END,
    F_DATE(TMP_BANKMARKETING.DAY, TMP_BANKMARKETING.MONTH, 2019),
    TMP_BANKMARKETING.DURATION,
    TMP_BANKMARKETING.CAMPAIGN,
    CASE TMP_BANKMARKETING.PDAYS WHEN -1 THEN NULL ELSE TMP_BANKMARKETING.PDAYS END,
    TMP_BANKMARKETING.PREVIOUS,
    CASE TMP_BANKMARKETING.POUTCOME WHEN 'unknown' THEN NULL ELSE TMP_BANKMARKETING.POUTCOME END,
    F_SI_NO(TMP_BANKMARKETING.Y)
    
FROM
	TMP_BANKMARKETING INNER JOIN MARITAL ON TMP_BANKMARKETING.MARITAL = MARITAL.NAME
    LEFT JOIN EDUCATION ON TMP_BANKMARKETING.EDUCATION = EDUCATION.NAME
    LEFT JOIN JOB ON TMP_BANKMARKETING.JOB = JOB.NAME;

#####################################################################    
    
DROP PROCEDURE P_CLIENT_CALL;

DELIMITER $$
CREATE PROCEDURE P_CLIENT_CALL()
BEGIN

  /*VARIABLES*/
	DECLARE V_AGE TINYINT(3);
  DECLARE V_JOB INT(11);
  DECLARE V_MARITAL INT(11);
  DECLARE V_EDUCATION INT(11);
  DECLARE V_INSOLVENTE TINYINT(1);
  DECLARE V_BALANCE DECIMAL(8,2);
  DECLARE V_HOUSE_LOAN TINYINT(1);
  DECLARE V_PERSONAL_LOAN TINYINT(1);
  DECLARE V_TYPE_CONTACT ENUM('cellular', 'telephone');
  DECLARE V_DATE_CONTACT DATE;
  DECLARE V_DURATION_CALL SMALLINT(4);
  DECLARE V_NUMBER_CONTACTS_THIS_CAMPAIGN SMALLINT(3);
  DECLARE V_DAYS_LAST_CONTACT SMALLINT(4);
  DECLARE V_NUMBER_CONTACS_BEFORE_THIS_CAMPAIGN SMALLINT(4);
  DECLARE V_RESULT_LAST_CAMPAIGN ENUM('failure', 'other', 'success');
  DECLARE V_SOLD_PRODUCT TINYINT(1);

  DECLARE V_END TINYINT(1);
  DECLARE V_CLIENT_ID BIGINT(22);
  /*CURSOR*/

  DECLARE C_CLIENT_CALL CURSOR FOR
    SELECT
    TMP_BANKMARKETING.AGE, JOB.JOB_ID, MARITAL.MARITAL_ID, EDUCATION.EDUCATION_ID, F_SI_NO(TMP_BANKMARKETING.DEFAULT),
      TMP_BANKMARKETING.BALANCE, F_SI_NO(TMP_BANKMARKETING.HOUSING), F_SI_NO(LOAN),
      CASE TMP_BANKMARKETING.CONTACT WHEN 'unknown' THEN NULL ELSE TMP_BANKMARKETING.CONTACT END,
      F_DATE(TMP_BANKMARKETING.DAY, TMP_BANKMARKETING.MONTH, 2019), TMP_BANKMARKETING.DURATION, TMP_BANKMARKETING.CAMPAIGN,
      CASE TMP_BANKMARKETING.PDAYS WHEN -1 THEN NULL ELSE TMP_BANKMARKETING.PDAYS END, TMP_BANKMARKETING.PREVIOUS,
      CASE TMP_BANKMARKETING.POUTCOME WHEN 'unknown' THEN NULL ELSE TMP_BANKMARKETING.POUTCOME END, F_SI_NO(TMP_BANKMARKETING.Y)

    FROM
      TMP_BANKMARKETING INNER JOIN MARITAL ON TMP_BANKMARKETING.MARITAL = MARITAL.NAME
        LEFT JOIN EDUCATION ON TMP_BANKMARKETING.EDUCATION = EDUCATION.NAME
        LEFT JOIN JOB ON TMP_BANKMARKETING.JOB = JOB.NAME;

 /*HANDLER*/

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET V_END = 1;

  /*OPEN CURSOR*/

  OPEN C_CLIENT_CALL;

  /*LOOP*/

  L_CLIENT_CALL : LOOP

    /*FETCH*/
    FETCH C_CLIENT_CALL INTO V_AGE, V_JOB, V_MARITAL, V_EDUCATION, V_INSOLVENTE, V_BALANCE, V_HOUSE_LOAN, V_PERSONAL_LOAN, V_TYPE_CONTACT, V_DATE_CONTACT,V_DURATION_CALL, V_NUMBER_CONTACTS_THIS_CAMPAIGN, V_DAYS_LAST_CONTACT, V_NUMBER_CONTACS_BEFORE_THIS_CAMPAIGN, V_RESULT_LAST_CAMPAIGN, V_SOLD_PRODUCT;

    IF V_END = 1 THEN LEAVE L_CLIENT_CALL; END IF;

    /*INSTRUCTIONS*/

    INSERT INTO CLIENT(AGE, BALANCE, INSOLVENTE, HOUSE_LOAN, PERSONAL_LOAN, JOB_ID, EDUCATION_ID, MARITAL_ID)
      VALUES (V_AGE, V_BALANCE, V_INSOLVENTE, V_HOUSE_LOAN, V_PERSONAL_LOAN, V_JOB, V_EDUCATION, V_MARITAL);

	SELECT  (`AUTO_INCREMENT` - 1) INTO V_CLIENT_ID FROM information_schema.TABLES WHERE TABLE_SCHEMA = 'BANKMARKETING' AND TABLE_NAME = 'CLIENT';

    INSERT INTO `CALL`(TYPE_CONTACT, DATE_CONTACT, DURATION_CALL, NUMBER_CONTACTS_THIS_CAMPAIGN, DAYS_LAST_CONTACT, NUMBER_CONTACS_BEFORE_THIS_CAMPAIGN, RESULT_LAST_CAMPAIGN, SOLD_PRODUCT, CLIENT_ID)
      VALUES (V_TYPE_CONTACT, V_DATE_CONTACT, V_DURATION_CALL, V_NUMBER_CONTACTS_THIS_CAMPAIGN, V_DAYS_LAST_CONTACT, V_NUMBER_CONTACS_BEFORE_THIS_CAMPAIGN, V_RESULT_LAST_CAMPAIGN, V_SOLD_PRODUCT,V_CLIENT_ID);


  END LOOP L_CLIENT_CALL;

END;
$$
DELIMITER ;

CALL P_CLIENT_CALL;






/********************************************************************************************************************************************************************
*********************************************************|MAIN PROCEDURE|********************************************************************************************
********************************************************************************************************************************************************************/

DELIMITER $$
CREATE PROCEDURE P_DATA_DUMP_TMP()
BEGIN

	CALL P_JOB;
    CALL P_MARITAL;
    CALL P_EDUCATION;
    CALL P_CLIENT_CALL;

	# Desactivo el safe update
	SET SQL_SAFE_UPDATES = 0;

	DELETE FROM TMP_BANKMARKETING WHERE TMP_BANKMARKETING.AGE > 0;
    
    # Activo el safe update
    SET SQL_SAFE_UPDATES = 1;
END$$
DELIMITER ;

DROP PROCEDURE P_DATA_DUMP_TMP;

CALL P_DATA_DUMP_TMP(); # TIEMPO QUE TARDÓ CUANDO SE EJECUTO ~407,813 sec


# duracion hasta que salio el error 561,491 sec
/* Error Code: 1175. You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column.  
To disable safe mode, toggle the option in Preferences -> SQL Editor and reconnect. */




SELECT
	*
from
	CLIENT, `CALL`, EDUCATION, JOB, MARITAL
WHERE
	CLIENT.CLIENT_ID = `CALL`.CLIENT_ID AND
    CLIENT.EDUCATION_ID = EDUCATION.EDUCATION_ID AND
    CLIENT.JOB_ID = JOB.JOB_ID AND
    CLIENT.MARITAL_ID = MARITAL.MARITAL_ID;

